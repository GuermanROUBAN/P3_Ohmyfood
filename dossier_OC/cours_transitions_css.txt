
CHAPITRE - LES TRANSITIONS:

Pour créer une transition, vous aurez besoin de plusieurs informations :

une propriété CSS à modifier ;

une valeur initiale pour votre propriété CSS ;

une valeur finale pour cette même propriété ;

une durée ;

un événement pour déclencher votre transition.

-> propriété  transform  et sa fonction  scale(). scale()  permet de modifier la taille d’un élément, selon la valeur qu’on lui donne, sachant que 0 = 0 % et 1 = 100 %.



CHAPITRE - LES PSEUDOCLASSES:

Une pseudoclasse s’apparente à un if/else pour le CSS. Elle est interprétée si la condition de la pseudoclasse est à true.

Même s’il en existe d’autres, voici une liste des pseudoclasses les plus couramment utilisées pour déclencher des transitions :

:hover, qui est déclenché au survol de la souris ;

:active, activé au clic de l'utilisateur (le plus souvent pour les liens et boutons) ;

:focus, qui se déclenche lorsque son élément reçoit le focus (soit il est sélectionné à l'aide du clavier, soit il est activé avec la souris) ;

:valid, dont la validation du contenu s'effectue correctement par rapport au type de donnée attendu ;

:invalid, qui inversement, correspond à un élément dont la validation du contenu ne s'effectue pas correctement par rapport au type de donnée attendu ;

:not(), qui correspond à la négation. Elle prend un sélecteur en argument et permet de cibler les éléments qui ne sont pas représentés par cet argument ;

:checked, qui correspond aux input de type checkbox, option ou radio qui sont cochés ;

:enabled, un élément avec lequel on peut interagir ;

:disabled, qui correspond à un élément dont l'interaction a été bloquée.

Les pseudoclasses sont essentielles pour déclencher une transition en CSS.



CHAPITRE - Les 12 principes de l'animation sont :

Squash and Stretch, pour compresser et étirer un élément ;

Anticipation, pour préparer l’audience à un mouvement à venir ; 

Staging (mise en scène), pour guider les yeux de l’utilisateur vers les éléments importants d’une page ;

Straight Ahead and Pose to Pose (toute l'action d'un coup et partie par partie), qui correspond davantage à l'animation traditionnelle mais fait penser à la différence transitions/keyframes ; 

Follow Through and Overlapping Action (continuité du mouvement initial et chevauchement de deux mouvements consécutifs), pour faire accélérer et décélérer un élément en fonction de sa masse ; 

Slow in and slow out (ralentissement en début et en fin de mouvement), basé sur le fait que les objets ne démarrent pas et ne s’arrêtent pas instantanément ;

Arc, pour créer des mouvements naturels ;

Secondary Action (action secondaire), pour séparer différentes parties d’une scène dans une animation ;

Timing, pour faire se déplacer les objets à une vitesse crédible ;

Exaggeration (exagération), pour donner du caractère et de la personnalité à une animation ; 

Solid Drawing (notion de volume), pour que les animations correspondent au résultat souhaité ;

Appeal (charisme), pour rendre les animations plus dynamiques.



CHAPITRE - Transitions à propriétés multiples

il est possible d’animer autant de propriétés que l’on veut avec les transitions ;

le mot clé   all  permet d’appliquer des transitions simultanément à toutes les propriétés ;

ou bien on peut séparer les animations par des virgules, ce qui permet de leur donner des valeurs différentes. Exemple :  transition: transform 450ms, background-color 300ms;

on peut décaler le départ des transitions avec  transition-delay ;

la valeur de  transition-delay  peut également être définie directement dans la propriété  transition.



CHAPITRE - L'accélaration

l’accélération et la décélération des transitions sont contrôlées par la propriété  transition-timing-function ;

si aucune fonction de timing n’est indiquée, la transition utilisera la fonction  ease. Elle suit un profil d’accélération plus net, et une rampe de décélération plus prononcée ;

parmi les autres mots clés pour les fonctions de temporisation, on peut trouver  ease-in,   ease-out,   ease-in-out, et  linear ;

quand aucune fonction de timing par défaut ne correspond à l’animation, il est possible de créer ses propres courbes d’animation personnalisée à l’aide de la fonction  cubic-bezier()  ;

il existe des outils pour ajuster les effets de timing avec la fonction  cubic-bezier()



CHAPITRE - Optimiser les performances de son navigateur pour ses animations CSS

à l'écran, il n'y a pas de véritable mouvement, mais une succession d'images s'enchaînant suffisamment rapidement pour être interprétées par notre cerveau comme du mouvement ;

cette succession d'images s'appelle les FPS (Frame Per Second, ce qui signifie images par seconde) ;

plus le FPS est élevé, plus l'animation est fluide ;

le taux d’images par seconde idéal est 60 FPS ;

les quatre étapes de la création d’une page web sont : 

Style : le navigateur comprend la structure HTML du code qu'il reçoit et prépare le style qui sera appliqué,

Layout (mise en page) : le navigateur détermine la mise en page et la taille des éléments en fonction du style qu'il a reçu,

Paint : il transforme les éléments en pixels,

Composition : il combine tous les éléments pour composer la page qui s’affiche ;

pour assurer la fluidité des animations, il faut se contenter d’animer des propriétés de l’étape composition. Les plus utiles sont  transform  et  opacity  .



CHAPITRE - TRANSFORME 

ATTENTION

On ne peut assigner qu’une seule propriété  transform  à un élément.

Alors, comment faire pour avoir plusieurs transformations dans une seule propriété  transform  ?

Pour cela, faites une liste de toutes les fonctions que vous voulez utiliser dans la propriété  transform.

Pour créer un effet qui combine rotation et changement d'échelle, nous devons indiquer la fonction  rotate()  à la suite de  scale()  dans la propriété  transform :

EX: transform: scale(.1) rotate(-90deg);

la propriété  transform  nous permet de manipuler et animer nos sites de presque toutes les manières, et comme tout se passe pendant l’étape composition, les animations sont bien fluides sur tous les supports ;

on peut déplacer des éléments avec les fonctions translate :   translate(),  translateX(),  translateY()  et  translate3d()  ;

on peut agrandir avec les fonctions scale :  scale(),  scaleX(),  scaleY()  et  scale3d()  ;

et on peut les faire pivoter grâce aux fonctions rotate :  rotate(),  rotateX(),  rotateY() et  rotateZ()  ;

si on ajoute une deuxième propriété  transform, elle annule la première. On ne peut donc définir qu’une seule propriété  transform  dans un même sélecteur ;

pour effectuer plusieurs transformations, on peut les lister dans une même propriété transform comme 

transform:translateX(200%) scale(2)
;

une propriété avec plusieurs fonctions exécute les fonctions dans l’ordre, de droite à gauche ;

les fonctions de transformations en 3D comme translate3d(),  rotateZ()  et  scale3d()  ont également besoin de la fonction perspective pour indiquer au navigateur la distance à laquelle l'utilisateur se trouve : plus la distance est grande, moins l'animation sera marquée.



CHAPITRE - TModifiez le point d’ancrage d’un élément grâce à transform-origin

transform-origin  permet de repositionner le point d’ancrage, qui se trouve par défaut au centre de l’élément ;

on peut régler ce point d’origine en utilisant des unités comme px, rem, vh, etc. ;

il est aussi possible d'utiliser des pourcentages pour X et Y ;

ou encore, on peut utiliser des mots clés :  left  et   right  pour l’axe X,  top  et  bottom  pour l’axe Y, et  center  pour les deux ;

il est possible de ne pas indiquer la valeur de l'axe Y ou, quand on utilise des mots clés, de mettre uniquement une valeur : le navigateur comprend de lui-même à quel axe la valeur s'applique ;

quand on change le point d’origine en 3D, la valeur de Z doit être exprimée en unités (et non en pourcentages) ! 



CHAPITRE - Analysez la performance de vos animations avec Chrome DevTools

Chrome DevTools est l'outil de prédilection des développeurs. Il permet d'inspecter le code source d'une page, d'analyser les performances de notre page, de brider la performance de notre machine pour simuler un appareil plus lent. Pour cette dernière option, activez l’option “CPU throttling” ;

l'outil Performance permet d'analyser les performances d’une page, notamment le taux d’images par seconde d’une animation ;

on peut utiliser l’onglet Performance pour analyser nos animations, ce qui permet de repérer les problèmes dans notre code qui pourraient causer des problèmes de fluidité sur certains supports ;

zoomer sur une image précise d’une animation permet de détailler les calculs effectués par le navigateur, que nous avions vus dans le chapitre sur le fonctionnement du navigateur.



CHAPITRE - Animez les couleurs de manière performante avec opacity

animer la couleur d’une propriété déclenche des calculs de paint ;

la propriété  opacity  nous permet de faire des transitions entre des couleurs en évitant ces calculs ;

la propriété  opacity  reçoit une valeur entre 0 et 1, 0 étant complètement transparent et 1 complètement opaque ;

pour éviter d’avoir à ajouter des  <div>  supplémentaires, que l'on aurait dû ajouter à chaque fois dans le HTML, on peut utiliser le pseudoélément  ::before  ou  ::after  ;

pour créer un pseudoélément, ajoutez le nom du pseudoélément à un sélecteur, en utilisant le préfixe double deux-points :  .selector::after{...}

les pseudo-éléments  ::before  et  ::after  créent un élément qui est respectivement le premier ou le dernier enfant de l’élément sélectionné ; 

il est possible de créer des dégradés de couleur. Il suffit d'attribuer un dégradé au background-color de l'élément d'arrière-plan. On fera ensuite disparaître l'élément superposé avec opacity: 0.